Goal ::= MainClass  ClassD  <EOF>

ClassD ::= ClassDeclaration ClassD | lamba
ClassDeclaration

MainClass ::= "class" Identifier "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")" "{" Statement "}" "}"

ClassDeclaration ::= "class" Identifier ( "extends" Identifier )? "{"  VarD ConstructorD  MethodD  "}"

VarD ::= VarDeclaration VarD | lamba
VarDeclaration ::= Type Identifier ";"

ConstructorD ::= ConstructorDeclaration ConstructorD | lamba
ConstructorDeclaration::= Identifier "(" ( Type Identifier CommaVar )? ")" "{"  VarD  Stat  "}"

CommaVar ::= "," Type Identifier CommaVar | lamba

MethodD ::= MethodDeclaration MethodD | lamba
MethodDeclaration ::= ("public" | "private" | "protected") Type Identifier "(" ( Type Identifier CommaVar)? ")" "{" VarD Stat "return" Expression ";" "}"

Type ::= "boolean" SquareBrackets
| "int" SquareBrackets
| "float" SquareBrackets
| "String" SquareBrackets
| "char" SquareBrackets

SquareBrackets ::= "[" "]" | lamba

Stat ::= Statement Stat | lamba

Statement ::= "{" Stat  "}"
| "if" "(" Expression ")" Statement IfStar
| "while" "(" Expression ")" Statement
| "System.out.println" "(" Expression ")" ";"
| Identifier IdStar

											
IfStar ::= "else" Statement | lamba
IdStar ::= "=" Expression ";" | "[" Expression "]" "=" Expression ";"

Expression ::= <INTEGER_LITERAL> ExprStar
| <FLOAT_LITERAL> ExprStar
| "true" ExprStar
| "false" ExprStar
| Identifier ExprStar
| "this" ExprStar
| "new" NewStar
| "!" Expression ExprStar	
| "(" Expression ")" ExprStar

NewStar ::= ("int" | "float" | "String" | "char" | "boolean" ) "[" Expression "]" ExprStar
| Identifier "(" (Expression CommaExpr)? ")" ExprStar

ExprStar ::= ( "&&" | "||" | "==" | "!=" | "<" Equal | ">" Equal | "+" | "-" | "*" | "/" ) Expression ExprStar
| "[" Expression "]" ExprStar
| "." Dot
| lamba

Equal ::= "=" | lamba

Dot ::= "." "length" ExprStar 
| Identifier "(" ( Expression CommaExpr )? ")" ExprStar

CommaExpr ::= "," Expression CommaExpr | lamba

Identifier ::= <IDENTIFIER>